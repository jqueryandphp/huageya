/// <reference types="node" />
import { load } from 'cheerio';
import * as React from 'react';
interface DynamicChunkMap {
    js: string[];
    css: string[];
}
export interface FilterContext {
    publicPath: string;
}
export interface Args extends Partial<FilterContext> {
    chunkMap: DynamicChunkMap;
}
declare type cheerio = ReturnType<typeof load>;
export declare type Handler = ($: cheerio, args: Args) => cheerio;
export interface Polyfill {
    host?: string;
}
declare type ContextFunc = () => object;
export interface Config {
    /** prefix path for `filename` and `manifest`, if both in the same directory */
    root?: string;
    /** use renderToNodeStream, better perf */
    stream?: boolean;
    /** ssr manifest, default: `${root}/ssr-client-mainifest.json` */
    manifest?: string;
    /** umi ssr server file, default: `${root}/umi.server.js` */
    filename?: string;
    /** default false */
    polyfill?: boolean | Polyfill;
    /** use renderToStaticMarkup  */
    staticMarkup?: boolean;
    /** replace the default ReactDOMServer.renderToString */
    customRender?: (args: RenderArgs) => Promise<string>;
    /** handler function for user to modify render html accounding cheerio */
    postProcessHtml?: Handler | Handler[];
    /** is dev env, default NODE_ENV=development */
    dev?: boolean;
    /** TODO: serverless */
    serverless?: boolean;
}
export interface RenderOpts extends Pick<Config, 'polyfill'> {
    /** mock global object like { g_lang: 'zh-CN' } => global.window.g_lang / global.g_lang  */
    runInMockContext?: object | ContextFunc;
}
export interface RenderArgs {
    htmlElement: React.ReactNode;
    rootContainer: React.ReactNode;
    matchPath: string;
    g_initialData: any;
    chunkMap?: DynamicChunkMap;
}
export interface Context {
    req: {
        url: string;
    };
}
export interface Result {
    ssrHtml?: string;
    ssrStream?: NodeJS.ReadableStream;
    matchPath: string;
    chunkMap?: DynamicChunkMap;
    g_initialData: any;
}
export declare type Server = (config: Config) => (ctx: Context, renderOpts?: RenderOpts) => Promise<Result>;
declare const server: Server;
export default server;
